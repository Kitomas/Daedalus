SYMBOLS {

	__STACKSIZE__:   type = weak, value = $0100; # 1 page(s) stack
	__STACK_START__: type = weak, value = $0700;

}

MEMORY {

	ZP:          start = $0000, size = $0100, type = rw, define = yes; # 256B
	NMETBL_RAM:  start = $0100, size = $01A0, type = rw, define = yes; # 160B
	OAM_RAM:     start = $0200, size = $0100, type = rw, define = yes; # 256B
	APU_RAM:     start = $0300, size = $0100, type = rw, define = yes; # 256B
	RAM:         start = $0400, size = $0400, type = rw, define = yes; #1024B
	# internal ram (2kB):
	# $0000-$00FF zeropage				  (256B)
	# $0100-$019F nametable write buffer  (160B; same page as cpu stack)
	# $01A0-$01FF cpu stack               ( 96B)
	# $0200-$02FF oam dma buffer          (256B)
	# $0300-$03FF apu/sound player buffer (256B)
	# $0400-$06FF higher memory           (768B)
	# $0700-$07FF cc65 parameter stack    (256B)
	HEADER:      start = $0000, size = $0010, file = %O, fill = yes;
	PRG:         start = $8000, size = $7FFA, file = %O, fill = yes, define = yes;
	PRG_VECTORS: start = $FFFA, size = $0006, file = %O, fill = yes;
	CHR_A:       start = $0000, size = $1000, file = %O, fill = yes; # left pattern table (4096B)
	CHR_B:       start = $1000, size = $1000, file = %O, fill = yes; #right pattern table (4096B)

	#(old; ignore) RAM:         start = $0700, size = __STACKSIZE__, define = yes;

}

SEGMENTS {

	ZEROPAGE:      load = ZP,             type = zp;
	NAMETABLE_BUF: load = NMETBL_RAM,     type = bss, define   = yes;
	OAM_BUF:	   load = OAM_RAM,        type = bss, define   = yes;
	APU_BUF:       load = APU_RAM,        type = bss, define   = yes;
	BSS:           load = RAM,            type = bss, define   = yes;
	
	HEADER:        load = HEADER,         type = ro;
	STARTUP:       load = PRG,            type = ro,  define   = yes;
	LOWCODE:       load = PRG,            type = ro,  optional = yes; #
	ONCE:          load = PRG,            type = ro,  optional = yes; #
	CODE:          load = PRG,            type = ro,  define   = yes;
	RODATA:        load = PRG,            type = ro,  define   = yes;
	VECTORS:       load = PRG_VECTORS,    type = ro,  define   = yes; #rw;
	CHARS_A:       load = CHR_A,          type = rw;
	CHARS_B:       load = CHR_B,          type = rw;
	DATA:          load = PRG, run = RAM, type = rw,  define   = yes; #

}

#idk what this does and i can't seem to find much about it
FEATURES {

	CONDES: type    = constructor,
			label   = __CONSTRUCTOR_TABLE__,
			count   = __CONSTRUCTOR_COUNT__,
			segment = ONCE;
	CONDES: type    = destructor,
			label   = __DESTRUCTOR_TABLE__,
			count   = __DESTRUCTOR_COUNT__,
			segment = RODATA;
	CONDES: type    = interruptor,
			label   = __INTERRUPTOR_TABLE__,
			count   = __INTERRUPTOR_COUNT__,
			segment = RODATA,
			import  = __CALLIRQ__;

}
